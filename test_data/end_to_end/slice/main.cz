fn print(s v: [u16]) {
    prints("slice: [");
    let i = 0;
    while i < v.len() {
        if i > 0 {
            prints(", ");
        }
        print_u16(v[i]);
        i = i + 1;
    }
    prints("]");
    println();
}

fn print(a v: [u16; 5]) {
    prints("array: [");
    let i = 0;
    while i < v.len() {
        if i > 0 {
            prints(", ");
        }
        print_u16(v[i]);
        i = i + 1;
    }
    prints("]");
    println();
}

fn concat<T>(_ slices: [[T]], init: T) -> [T] {
    let len = 0;
    let i = 0;
    while i < slices.len() {
        len = len + slices[i].len();
        i = i + 1;
    }

    let r = [init; len];

    let i = 0;
    let ri = 0;
    while i < slices.len() {
        let sl = slices[i];
        let j = 0;
        while j < sl.len() {
            r[ri] = sl[j];
            j = j + 1;
            ri = ri + 1;
        }
        i = i + 1;
    }

    r
}


fn main() {
    print(a: [=1, 2, 3, 4, 5]);

    println();
    print(s: concat([], init: 0));
    print(s: concat([[], [1, 2, 3], [], [4, 5, 6, 7], []], init: 0));

    println();
    let sl = concat([[1], [3, 4], [5]], init: 0);
    print(a: [= sl[0], 2, sl[1], sl[2], sl[3]]);
    print(a: [=42; 5]);

    println();
    print(s: [
        {
            fn val() -> u16 { 4242 }
            val()
        };
        {
            fn len() -> usize { 8 }
            len()
        }]);

    println();
    let sl = [1, 2, 3, 4, 5];
    print(s: sl[..]);
    print(s: sl[2..4]);
    print(s: sl[2..=4]);
    print(s: sl[2..]);
    print(s: sl[..4]);
    print(s: sl[..=4]);

    println();
    print(s: sl[0..0]);
    print(s: sl[3..3]);
    print(s: sl[5..5]);
    print(s: sl[..0]);
    print(s: sl[5..]);
}