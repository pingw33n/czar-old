module m1 {
    module m2 {
        struct S {
            s: String,
        }

        fn f(s: String) {
            prints(s); println();
        }
    }
}

use m1::m2::{self, S};

fn f1() {
    let s1 = S {s: "s1"};
    let s2 = m2::S {s: "s2"};
    m2::f(s: s1.s);
    m2::f(s: s2.s);
}

fn f2() {
    module mod1 {
        fn f() { prints("f"); println(); }
        fn f(x: i32) { print_i32(x); println(); }
    }

    use mod1::f;

    f();
    f(x: 42);
}

use m1::{};

fn f3() {
    module mod1 {
        struct S{s: String}
        type S2 = S;
    }
    use mod1::S2;

    prints(S2{s: "f3"}.s); println();
}

module m3 {
    module m4 {
        use ::foo;
        use ::m3::foo as bar;

        fn test() {
            foo(v: "test1");
            bar(42);
        }
    }

    fn foo(_ v: i32) {
        print_i32(v); println()
    }
}

fn foo(v: String) {
    prints(v); println()
}

fn f4() {
    println();
    m3::m4::test();
    package(std)::prelude::prints("test2"); println()
}


fn main() {
    f1();
    f2();
    f3();
    f4();
}