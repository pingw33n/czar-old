// Adapted from https://gist.github.com/joshmarinacci/c84d0979e100d107f685

pub unsafe fn sqrtf(_ v: f32) -> f32;
pub unsafe fn truncf(_ v: f32) -> f32;

module vec3 {
    struct Vec3 {
        x: f32,
        y: f32,
        z: f32,
    }

    impl Vec3 {
        fn new(x: f32, y: f32, z: f32) -> Self {
            Self { x: x, y: y, z: z }
        }

        fn scale(self, _ s: f32) -> Self {
            Self { x: self.x * s, y: self.y * s, z: self.z * s }
        }

        fn add(self, _ v: Self) -> Self {
            Self { x: self.x + v.x, y: self.y + v.y, z: self.z + v.z }
        }

        fn sub(self, _ v: Self) -> Self {
            Self { x: self.x - v.x, y: self.y - v.y, z: self.z - v.z }
        }

        fn dot(self, _ v: Self) -> f32 {
            self.x * v.x + self.y * v.y + self.z * v.z
        }

        fn mag(self) -> f32 {
            super::sqrtf(self.dot(self))
        }

        fn norm(self) -> Self {
            self.scale(1.0 / self.mag())
        }
    }
}

use vec3::Vec3;

module color {
    struct Color {
        r: f32,
        g: f32,
        b: f32,
    }

    impl Color {
        fn new(r: f32, g: f32, b: f32) -> Self {
            Self {r: r, g: g, b: b}
        }

        fn scale(self, _ s: f32) -> Self {
            Self { r: self.r * s, g: self.g * s, b: self.b * s }
        }

        fn add(self, _ v: Color) -> Self {
            Self { r: self.r + v.r, g: self.g + v.g, b: self.b + v.b }
        }
    }
}

use color::Color;

module sphere {
    use super::{Color, Ray, Vec3};
    use super::sqrtf;

    struct Sphere {
        center: Vec3,
        radius: f32,
        color: Color,
    }

    impl Sphere {
        fn new(center: Vec3, radius: f32, color: Color) -> Self {
            Self { center: center, radius: radius, color: color }
        }

        fn normal(self, _ pt: Vec3) -> Vec3 {
            pt.sub(self.center).norm()
        }

        fn intersect(self, ray: Ray) -> {hit: bool, tval: f32} {
            let l = self.center.sub(ray.orig);
            let tca = l.dot(ray.dir);
            if tca >= 0.0 {
                let d2 = l.dot(l) - tca * tca;
                let r2 = self.radius * self.radius;
                if d2 <= r2 {
                    let thc = sqrtf(r2 - d2);
                    let t0 = tca - thc;
                    //let t1 = tca + thc;
                    if t0 <= 10000.0 {
                        {hit: true, tval: t0}
                    } else {
                        {hit: false, tval: -1.0_f32}
                    }
                } else {
                    {hit: false, tval: -1.0_f32}
                }
            } else {
                {hit: false, tval: -1.0_f32}
            }
        }
    }
}

use sphere::Sphere;

struct Light {
    pos: Vec3,
    color: Color,
}

struct Ray {
    orig: Vec3,
    dir: Vec3,
}

fn shade_pixel(ray: Ray, obj: Sphere, tval: f32) -> f32 {
    let WHITE   = Color::new(r: 1.0, g: 1.0, b: 1.0);
    let LIGHT1 = Light {
        pos: Vec3::new(x: 0.7, y: -1.0, z: 1.7),
        color: WHITE
    };

    let pi = ray.orig.add(ray.dir.scale(tval));
    let color = diffuse_shading(pi: pi, obj: obj, light: LIGHT1);
    let col = (color.r + color.g + color.b) / 3.0;
    col
}

fn clamp(_ v: f32, min: f32, max: f32) -> f32 {
    if v < min { min }
    else if v > max { max }
    else { v }
}

fn diffuse_shading(pi: Vec3, obj: Sphere, light: Light) -> Color {
    let n = obj.normal(pi);
    let lam1 = light.pos.sub(pi).norm().dot(n);
    let lam2 = clamp(lam1, min: 0.0, max: 1.0);
    light.color.scale(lam2 * 0.5).add(obj.color.scale(0.3))
}

fn main() {
    let RED     = Color::new(r: 1.0, g: 0.0, b: 0.0);
    let GREEN   = Color::new(r: 0.0, g: 1.0, b: 0.0);
    let BLUE    = Color::new(r: 0.0, g: 0.0, b: 1.0);

    let SPHERE1 = Sphere::new(center: Vec3::new(x: -1.0, y: 0.0, z: 3.0), radius: 0.3, color: RED);
    let SPHERE2 = Sphere::new(center: Vec3::new(x:  0.0, y: 0.0, z: 3.0), radius: 0.8, color: GREEN);
    let SPHERE3 = Sphere::new(center: Vec3::new(x:  1.0, y: 0.0, z: 3.0), radius: 0.3, color: BLUE);

    let W = 20.0_f32 * 4.0;
    let H = 10.0_f32 * 4.0;

    let y = 0.0_f32;
    while y < H {
        let x = 0.0_f32;
        while x < W {
            let ray = Ray {
                orig: Vec3::new(x: 0.0, y: 0.0, z: 0.0),
                dir: Vec3::new(x: (x - W / 2.0) / W, y: (y - H / 2.0) / H, z: 1.0).norm(),
            };

            let hit: {obj: Sphere, tval: f32};
            let hit_found = false;

            let ret = SPHERE1.intersect(ray: ray);
            if ret.hit {
                hit = {obj: SPHERE1, tval: ret.tval};
                hit_found = true;
            }
            let ret = SPHERE2.intersect(ray: ray);
            if ret.hit {
                hit = {obj: SPHERE2, tval: ret.tval};
                hit_found = true;
            }
            let ret = SPHERE3.intersect(ray: ray);
            if ret.hit {
                hit = {obj: SPHERE3, tval: ret.tval};
                hit_found = true;
            }

            let c = if hit_found {
                let shade = f32_to_usize(shade_pixel(ray: ray, obj: hit.obj, tval: hit.tval) * 5.0);
                ['░', '▒', '▓', '█', '█'][shade]
            } else {
                ' '
            };
            print_char(c);

            x = x + 1.0;
        }
        prints("▕"); println();
        y = y + 1.0;
    }
}