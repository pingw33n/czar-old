pub module prelude {
    pub use ::bool;
    pub use ::char;
    pub use ::i8;
    pub use ::u8;
    pub use ::i16;
    pub use ::u16;
    pub use ::i32;
    pub use ::u32;
    pub use ::i64;
    pub use ::u64;
    pub use ::i128;
    pub use ::u128;
    pub use ::isize;
    pub use ::usize;
    pub use ::f32;
    pub use ::f64;
    pub use ::string::String;
    pub use ::Never;

    pub use ::panic::panic;
    pub use ::unreachable;

    // FIXME these are temporary, for testing
    pub unsafe fn print_bool(_ v: bool);
    pub unsafe fn print_char(_ v: char);
    pub unsafe fn print_char_hex(_ v: char);
    pub unsafe fn print_i8(_ v: i8);
    pub unsafe fn print_u8(_ v: u8);
    pub unsafe fn print_i16(_ v: i16);
    pub unsafe fn print_u16(_ v: u16);
    pub unsafe fn print_i32(_ v: i32);
    pub unsafe fn print_u32(_ v: u32);
    pub unsafe fn print_i64(_ v: i64);
    pub unsafe fn print_u64(_ v: u64);
    pub unsafe fn print_i128(_ v: i128);
    pub unsafe fn print_u128(_ v: u128);
    pub unsafe fn print_isize(_ v: isize);
    pub unsafe fn print_usize(_ v: usize);
    pub unsafe fn print_f32(_ v: f32);
    pub unsafe fn print_f64(_ v: f64);
    pub unsafe fn println();
    pub unsafe fn print_sep();
    pub unsafe fn prints(_ s: String);
    pub unsafe fn f32_to_usize(_ v: f32) -> usize;
    pub unsafe fn test_run_id() -> u32;
}

pub struct f32 {{}}
pub struct f64 {{}}
pub struct i8 {{}}
pub struct u8 {{}}
pub struct i16 {{}}
pub struct u16 {{}}
pub struct i32 {{}}
pub struct u32 {{}}
pub struct i64 {{}}
pub struct u64 {{}}
pub struct i128 {{}}
pub struct u128 {{}}
pub struct isize {{}}
pub struct usize {{}}
pub struct bool {{}}
pub struct char {{}}

pub module string {
    pub struct String {
        ptr: ::ptr::Ptr<u8>,
        len: usize,
    }

    impl String {
        pub fn len(self) -> usize {
            self.len
        }
    }
}

pub module ops {
    pub struct RangeFull {}

    pub struct RangeFrom<T> {
        pub start: T,
    }

    pub struct RangeTo<T> {
        pub end: T,
    }

    pub struct Range<T> {
        pub start: T,
        pub end: T,
    }

    pub struct RangeToInclusive<T> {
        pub end: T,
    }

    pub struct RangeInclusive<T> {
        pub start: T,
        pub end: T,
    }
}

pub module ptr {
    pub struct Ptr<T> {{}}
}

module intrinsic {
    unsafe fn unreachable() -> Never;

    unsafe fn transmute<T, U>(_ v: T) -> U;
}

pub module slice {
    struct Repr<T> {
        ptr: ::ptr::Ptr<T>,
        len: usize,
    }

    impl<T> Repr<T> {
        fn from(_ v: [T]) -> Self {
            ::intrinsic::transmute(v)
        }
    }

    impl<T> [T] {
        pub fn ptr(self) -> ::ptr::Ptr<T> {
            Repr::from(self).ptr
        }

        pub fn len(self) -> usize {
            Repr::from(self).len
        }

        fn __index_usize(self, _ i: usize) -> ::ptr::Ptr<T> {
            if i >= self.len() {
                ::panic::index_out_of_bounds();
            }
            self.ptr() + ::intrinsic::transmute<usize, isize>(i) /*FIXME*/
        }

        fn __index_range(self, _ r: ::ops::Range<usize>) -> Self {
            if r.start > r.end {
                ::panic::index_out_of_bounds();
            }
            if r.start > self.len() {
                ::panic::index_out_of_bounds();
            }
            if r.end > self.len() {
                ::panic::index_out_of_bounds();
            }
            let ptr = self.ptr() + ::intrinsic::transmute<usize, isize>(r.start) /*FIXME*/;
            let len = r.end - r.start;
            let repr = Repr { ptr: ptr, len: len };
            ::intrinsic::transmute(repr)
        }

        fn __index_range_from(self, _ r: ::ops::RangeFrom<usize>) -> Self {
            if r.start > self.len() {
                ::panic::index_out_of_bounds();
            }
            self.__index_range(r.start..self.len())
        }

        fn __index_range_full(self, _ _r: ::ops::RangeFull) -> Self {
            self
        }

        fn __index_range_inclusive(self, _ r: ::ops::RangeInclusive<usize>) -> Self {
            self.__index_range(r.start..r.end + 1)
        }

        fn __index_range_to(self, _ r: ::ops::RangeTo<usize>) -> Self {
            if r.end > self.len() {
                ::panic::index_out_of_bounds();
            }
            self.__index_range(0..r.end)
        }

        fn __index_range_to_inclusive(self, _ r: ::ops::RangeToInclusive<usize>) -> Self {
            if r.end > self.len() {
                ::panic::index_out_of_bounds();
            }
            self.__index_range(0..r.end + 1)
        }
    }
}

module panic {
    fn panic(_ msg: String) -> Never {
        unsafe fn abort();

        prints(msg); println();
        abort();

        ::intrinsic::unreachable()
    }

    fn index_out_of_bounds() -> Never {
        panic("index out of bounds")
    }
}

fn unreachable() -> Never {
    ::panic::panic("reached unreachable code")
}

fn unreachable(_ msg: String) -> Never {
    ::panic::panic(msg)
}

type Unit = {};

pub struct Never {{}}