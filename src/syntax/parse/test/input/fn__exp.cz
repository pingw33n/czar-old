fn foo();
pub fn foo();
unsafe fn foo();
pub unsafe fn foo();
pub unsafe fn foo(s: *u8) -> i32;
pub fn main() -> i32 {}
fn foo(a: {}) -> {} {}
fn foo(s: &str) {}
fn foo(self) {}
fn foo(&self) {}
fn foo(&mut self, arg1: u32, arg2: Self, ...) -> &&mut Self {
  Self::bar(*self, arg1, arg2);
  self.x = 0;
  self.foo();
  let self_: &Self = self;
}
module m {
  fn foo() {}
}
fn foo() {
  fn bar() {}
  module m {
    fn baz() {}
  }
}
fn foo(self, _ unnamed: u32, arg1: u32, label name: u32, _ unnamed2: u32) {
  receiver.foo(0, arg1: 42, label: 56, 78);
  receiver.foo<>();
  receiver.foo<T, path<>::to<T, Inner<>>::Struct<T<U<>>, V<>>>();
}
fn f2() {
  path::to::Foo::bar(self: 42);
  path::to::Foo::bar<T>(self: r#self, self: self, break: r#_, break: "", package: r#Self, package: Self, continue: foobar);
}
