fn f() {
  let x;
  let x = "test";
  let x = foo + {
    42 + bar.baz
  };
  let x: Type;
  let x: MyType<Ta1, Foo<X, Y>>;
  let mut x: T;
  x = foo;
  let x: mut T;
  let _unused: mut MyType<T>::Foo<U>::Bar<V> = HashMap<&str, Vec<u32>>::new();

  let x = (let y = 0) && {let z = y + 42} || (let foo) && (foo = 42);
  let foo = if a { 0 } else { 42 } * 100;
}
